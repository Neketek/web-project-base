#!/usr/bin/env bash
#
# Title:       devenv
# Description: Master script for managing development environment
# Developer:   ddnomad
# Version:     0.0.1
set -eu -o pipefail
source ./xopos/bash/utils/message.util
source ./xopos/bash/utils/array.util

readonly ROOT_INFO_NAME="$(basename "$0")"
readonly ROOT_INFO_USER="$(who | cut -f1 -d ' ')"
readonly ROOT_INFO_DISTRO="$(grep -x "ID=.*" </etc/os-release | cut -f2 -d '=')"
readonly ROOT_INFO_SUBS_BDIR=./xopos/bash/subs/

ROOT_INFO_SUBS=()  # to be filled in import_subs()

readonly ROOT_MSG_ERR_UNSUF_ARGS='Error: unsufficient number of arguments: '
readonly ROOT_MSG_ERR_NOPT='Error: unknown option: '
readonly ROOT_MSG_HELP="$(cat <<EOF
Usage: ${ROOT_INFO_NAME} [-h] [MODULE] [MODULE OPTIONS] args

Manage development environment configuration and workflow.
Currently supported functions include:
    * Install host dependencies (Vagrant, Virtualbox)
    * TODO: append subcommands functionality

Most functions are exposed via respective subcommands. A list
of all supported subcommands and their respective options are
available below.

OPTIONS
    -h     --help           Print this message and exit
    -c     --no-color       Disable colored output
    -i     --install-deps   Install host dependencies

MODULES
    TODO: append subcommands list
    TODO: to see sub help execute ${ROOT_INFO_NAME} <sub> -h
EOF
)"


###############################################################
# Print help message of a master script and exit if requested
#
# Arguments:
#   $1 [optional] - exit code if exit is necessary
#
# Return:
#   None
#
# Terminates:
#   Yes
###############################################################
function print_help {
    local exit
    exit=false
    if [[ "$#" -eq 1 ]]; then
        exit="$1"
    fi
    __print 'PLAIN' "${exit}" "${ROOT_MSG_HELP}"
}


###
# Import subcommands
####
function import_subs {
    true
    # ./xopos/bash/subs/softinstall
    # ...
}


##########################################################
# Resolve arguments and pass control flow to subcommands
#
# Arguments:
#   $@ - all arguments of the scripts
#
# Return:
#   None
#
# Terminates:
#   Yes
##########################################################
function resolver {
    if [[ "$#" -lt 1 ]]; then
        print_error "${ROOT_MSG_ERR_UNSUF_ARGS}0"
        print_help 1
    fi
    case "$1" in
        -h | --help ) print_help 0 ;;
        -c | --no-color ) MESSAGE_OUTPUT_COLOR=false ;;
        -e | --no-stderr ) MESSAGE_OUTPUT_NOSTDERR=true ;;
        -* ) print_error "${ROOT_MSG_ERR_NOPT}$1" && print_help 1 ;;
    esac
}


##### MAIN FLOW #####
import_subs
resolver "$@"
# determine what sub to use and call it
# <path>/softinst -ce
# print_warning "Nothing to do!"
# exit 1
